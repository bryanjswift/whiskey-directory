h1. Whiskey Directory

The goal of this application is to create a way for people in a city to add and talk about drinks they've had in the city.

h2. Testing

h3. Specs

BDD Specs are written with the help of the "specs library":specs available on Google Code. The specs are executed as "JUnit":junit tests during Maven's test phase. This means the Maven build outputs information about tests run, passed and failed rather than information about what how the specs are defined. To see the specs executed as JUnit tests execute the `mvn clean test` command from the command prompt.

[specs]http://code.google.com/p/specs/
[junit]http://www.junit.org

In order to run the specs _as specs_ first execute `mvn package` which will build the war file and a directory with the war contents. Once the package is built run a command similar to:

<pre><code>
	scala -cp target/whiskey-directory/WEB-INF/lib/*:target/classes/:target/test-classes/:$M2_REPOSITORY/org/scala-tools/testing/specs/1.5.0/specs-1.5.0.jar {SpecificationObject}
	
</code></pre>

In the above command {SpecificationObject} is the full path of any object which extends org.specs.Specification, and $M2_REPOSITORY is an environment variable set to the root of the local Maven repository. On OSX $M2_REPOSITORY will probably be @~/.m2/repository@ but the tilde must be replaced with @/Users/username@.

With the above guidelines a full command may look like:

<pre><code>
	scala -cp target/whiskey-directory/WEB-INF/lib/*:target/classes/:target/test-classes/:$M2_REPOSITORY/org/scala-tools/testing/specs/1.5.0/specs-1.5.0.jar com.whiskeydirectory.model.DrinkSpecs
	
</code></pre>

h2. Building - Ant

h3. ant.properties

Ant's build.xml file looks for an ant.properties file at the same level as build.xml (project root) and expects the following properties to be defined:

* sdk.dir - location of the appengine sdk
* scala.compile.jar - location of the Scala compile jar [e.g. {scala.home}/lib/scala-compiler.jar]
* scala.library.jar - location of the Scala library jar [e.g. {scala.home}/lib/scala-library.jar]
* lib.src - library files for build and runtime (files get copied into build.lib.dir)
* lib.test - library files for testing
* scala.src - top level Scala source directory (.scala files)
* scala.test - top level Scala test source directory (.scala files)
* java.src - top level Java source directory (.java files)
* java.test - top level Java test source directory (.java files)
* resources.src - top level classpath resource directory (get copied into classes.dir)
* webapp.src - top level webapp directory (files get copied into war.dir)
* war.dir - top level packaging directory
* test.dir - where to compile test source to (.class files)

The build.xml defines several targets, what they do is outlined below:

* clean - _no dependencies_ - delete the directory specified by war.dir property
* init - _no dependencies_ - creates the directory specified by war.dir and copies all files in webapp.src into it
* copyjars - _depends on init_ - copies jar files in sdk.dir/lib/user and scala.library.jar into lib.dir
* compile - _depends on copyjars_ - compiles scala and java src into build.dir and copies resources.src into build.dir
* test-compile - _depends on compile_ - compiles java.test and scala.test into test.dir
* test - _depends on test-compile_ - executes tests compiled in test-compile using JUnit
* package - _depends on test_
* dev - _no dependencies_ - starts the dev_appserver jetty server
* install - _depends on clean and package_ - pushes war to app engine servers

h2. Building - Maven

h3. AppEngine jars



h3. Scala jars

The "Scala":s jars, including the specs library, should be located by Maven in the declared repositories in the pom.xml.

[s]http://www.scala-lang.org